import math

def euclidean_distance(point1, point2):
    return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)

def ClosestPairBruteForce(points):
    n = len(points)
    min_distance = float('inf')
    closest_pair = None

    for i in range(n - 1):
        for j in range(i + 1, n):
            distance = euclidean_distance(points[i], points[j])
            if distance < min_distance:
                min_distance = distance
                closest_pair = (points[i], points[j])

    return min_distance, closest_pair

def ClosestPairStrip(midStrip, minDistance):
    midStrip.sort(key=lambda x: x[1])

    n = len(midStrip)
    min_strip_distance = minDistance
    strip_closest_pair = None

    for i in range(n - 1):
        for j in range(i + 1, min(i + 7, n)):
            distance = euclidean_distance(midStrip[i], midStrip[j])
            if distance < min_strip_distance:
                min_strip_distance = distance
                strip_closest_pair = (midStrip[i], midStrip[j])

    return min_strip_distance, strip_closest_pair

def ClosestPairDivideAndConquer(points):
    if len(points) <= 3:
        return ClosestPairBruteForce(points)

    mid = len(points) // 2
    leftPoints = points[:mid]
    rightPoints = points[mid:]

    leftMinDistance, leftClosestPair = ClosestPairDivideAndConquer(leftPoints)
    rightMinDistance, rightClosestPair = ClosestPairDivideAndConquer(rightPoints)

    minDistance = min(leftMinDistance, rightMinDistance)
    closestPair = None
    if minDistance == leftMinDistance:
        closestPair = leftClosestPair
    else:
        closestPair = rightClosestPair

    midStrip = []
    for point in points:
        if abs(point[0] - points[mid][0]) < minDistance:
            midStrip.append(point)

    stripMinDistance, stripClosestPair = ClosestPairStrip(midStrip, minDistance)

    if stripMinDistance < minDistance:
        minDistance = stripMinDistance
        closestPair = stripClosestPair

    return minDistance, closestPair

# Example usage
points_example = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]

result_distance, result_pair = ClosestPairDivideAndConquer(points_example)

print("Minimum distance:", result_distance)
print("Closest pair of points:", result_pair)
